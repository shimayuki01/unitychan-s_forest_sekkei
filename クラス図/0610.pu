@startuml


interface ActionObject{
    event action
    fire()#イベント発行
}



class ActionEvent{
    ActionObject RecognizePlayerFront()#プレイヤーの前に何があるかを返す
    PlayerFrontObject = RecognizePlayerFront()
    PlayerFrontObject.fire()
}

Folder Action{
class Cook{
    GameData gameData
    CookItem[] _cookItems 
    List<string> _canCookItems

    void Start()
    void remakeCanCookItemsList(Bag _player_bag) //料理可能リストの生成
    bool canCook(string recipe_id, Bag _player_bag) //バック内の材料で料理ができるか確認する
    void doCook(string recipe_id, Bag _player_bag) //バックの材料を消費して料理をバックに追加

}

}
Folder Bag{

class Bag{
    static int _maxContentsNum = 10;
    Block[] _blockContents = new Block[_maxContentsNum];
    int _oneBlockMax;
    //_summaryContents<id,数>
    Dictionary<String, int> _summaryContents = new Dictionary<String, int>();
    
    bool canIn() //バックに入れられるか確認する関数の追加
    bool biggerQuantity(String id, int quantity) //指定したアイテムの個数がバッグの中身より多ければtrueを返す
    public void inItem(String id, int quantity) //バッグの中に物を入れる（ものを拾う）
    //バッグからアイテムを削除する（料理で素材を消費した場合など）
    //アイテムが削除できなかった場合はfalseを返す。削除出来たらtrue。
    public bool deleteItem(String id, int quantity)
    int getItemQuantity(string item_id)
    void summaryToBlock() //ブロック（バッグの中身の形）に変換する

}

class Block
{
    String _itemId;
    int _quantity;
    static int _max;

    public Block(String id, int num) //コンストラクタ
    String getItemId()
    int getQuantity() 

    delegate void addNum();
    delegate void subNum();
    delegate void maxNum();
    delegate void zeroNum();
}
}

class GameData{

    Item[] itemDataArray;
    CookItem[] cookItemDataArray;
    Dictionary<string, Item> id2Item;
    Dictionary<string, CookItem> id2CookItem;
    Dictionary<string, CookItem> recipeName2item;

    void Awake()
    Item getItem(string item_id)
    CookItem getRecipeFromName(string recipe_name)
    CookItem getRecipe(string recipe_id)
    CookItem[] getCookItemDataArray()
}

folder Player{

interface IAction{
    void Use()
}

interface IBag{
    Dictionary<string, int> getBagSummary()
    void inItem(string itemId, int num)
    void outItem()
}

interface ICook{
    void doCook(string recipe_id, Bag _player_bag)
}

class Player
{
    Ono playerOno
    Bag playerBag

    public int getPlayerOnoLv()
    public int getPlayerOnoAtk() 
    public Bag getPlayerBag()
    public Dictionary<string, int> getBagSummary()
}

class PlayerManager{
    
}

}

folder Items{

class Item {
    public string imgFileName
    public string name
    public string description
    public string id
    void Use()
}

class EatItem 
{
    //リンゴや木の実
    //music SE;
    int heal_amount;

}

class CraftItem
{
    // 斧など
    public Sozai[] sozai;
}

class CookItem
{
    // 料理
    public Sozai[] sozai;
}

class Sozai
{
    public string id;
    public int num;
}


}

Player-->IBag
Player-->IAction
Player-->ICook
Item--.|>IAction
Bag--.up|>IBag
Cook--.up|>ICook
Cook-->Bag
ActionEvent --> Cook
Cook-->GameData
GameData-->Items







EatItem --up|>Item
CraftItem --up|>Item
CookItem --up|>EatItem
CookItem --> Sozai
CraftItem -->Sozai