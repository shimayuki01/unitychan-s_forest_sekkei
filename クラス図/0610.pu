@startuml


Folder Action{
interface ActionObject{
    event action
    fire()#イベント発行
}
class ActionEvent{
    ActionObject RecognizePlayerFront()#プレイヤーの前に何があるかを返す
    PlayerFrontObject = RecognizePlayerFront()
    PlayerFrontObject.fire()
}
}



class GameData{

    Item[] itemDataArray;
    CookItem[] cookItemDataArray;
    Dictionary<string, Item> id2Item;
    Dictionary<string, CookItem> id2CookItem;
    Dictionary<string, CookItem> recipeName2item;

    void Awake()
    Item getItemFromId(string item_id)
    CookItem getCookItemFromId(string cookItem_id)
    CookItem[] getCookItemDataArray()
}

Folder Bag{

class Bag{
    static int _maxContentsNum = 10;
    Block[] _blockContents = new Block[_maxContentsNum];
    int _oneBlockMax;
    //_summaryContents<id,数>
    Dictionary<String, int> _summaryContents = new Dictionary<String, int>();
    
    bool canIn() //バックに入れられるか確認する関数の追加
    bool biggerQuantity(String id, int quantity) //指定したアイテムの個数がバッグの中身より多ければtrueを返す
    + void inItem(String id, int quantity) //バッグの中に物を入れる（ものを拾う）
    //バッグからアイテムを削除する（料理で素材を消費した場合など）
    //アイテムが削除できなかった場合はfalseを返す。削除出来たらtrue。
    + bool deleteItem(String id, int quantity)
    int getItemQuantity(string item_id)
    void summaryToBlock() //ブロック（バッグの中身の形）に変換する

}

class Block
{
    String _itemId;
    int _quantity;
    static int _max;

    + Block(String id, int num) //コンストラクタ
    String getItemId()
    int getQuantity() 

    delegate void addNum();
    delegate void subNum();
    delegate void maxNum();
    delegate void zeroNum();
}
}



folder Player{

interface IAction{
    void Use()
}


interface IBag{
    Dictionary<string, int> getBagSummary()
    void inItem(string itemId, int num)
    void outItem()
}

interface IManager{
    void doCook(string cookItem_id)
}



class Player
{
    int hp
    IOno playerOno
    IBag playerBag
    IManger Cook

    + int getPlayerOnoLv()
    + int getPlayerOnoAtk() 
    + Bag getPlayerBag()
    + healHp(int heal_point)
    + cook(string cookItem_id)
    + Dictionary<string, int> getBagSummary()
}


interface ICookItemSozaiAcquisition{
    Sozai[] getCookItemSozai(string cookItem_id)
}

interface IItemConsumption{
    void inItem(string itemId, int num)
    void deleteItem(string item_id, int num)
}
class Cook{
    - [Serialize]IItemConsumption bag
    + doCook(string cookItem_id)
    - deleteSozaiBag(sozai[])
}

}

folder Items{

class Item {
    + string imgFileName
    + string name
    + string description
    + string id
    void Use()
}

class EatItem 
{
    //リンゴや木の実
    //music SE;
    int heal_amount;

}

class CraftItem
{
    // 斧など
    + Sozai[] sozai;
}

class CookItem
{
    // 料理
    + Sozai[] sozai;
}

class Sozai
{
    + string id;
    + int num;
}


}

Player-->IBag
Player-->IAction
Player-->IManager
Item--.up|>IAction
Bag--.up|>IBag
Bag--.up|>IItemConsumption
Bag--> Block
Cook-.up|>IManager
Cook-->IItemConsumption
Cook-->ICookItemSozaiAcquisition
GameData-->Items
GameData-.|>ICookItemSozaiAcquisition







EatItem --up|>Item
CraftItem --up|>Item
CookItem --up|>EatItem
CookItem --> Sozai
CraftItem -->Sozai

